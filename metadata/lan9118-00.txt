# Buffer overflow and out-of-bounds read in lan9118 NIC for ARM

There is a buffer overflow in tx_fifo_push in lan9118 NIC for ARM causing an out-of-bounds read of tx_status_fifo. The write and read primitives are so powerful that they can likely be abused to escape the VM.

## Read primitive
In tx_status_fifo_pop, there is an out-of-bounds read at the line:
val = s->tx_status_fifo[s->tx_status_fifo_head];
because there is an overwrite of s->tx_status_fifo_head.

Security Impact: because s->tx_status_fifo_head is int32, so this read primitive seems powerful.

## Buffer overflow and the write primitive
In tx_fifo_push, there are three states for tx_fifo: TX_IDLE, TX_B, TX_DATA. However, because of the lack of the check of s->txp->len, we can visit TX_IDLE->TX_B->TX_DATA many times to overflow s->txp->data whose size is only 2048 then overwrite s->tx_status_fifo_head.

This can be done like below. (Suppose the hardware address of lan9118 is 0x5000000.)
First, the max size of the buffer you can write once is 0x800. The pattern is in the following.
	writel 0x5000020 0x800 // 0x800 bytes buffer you’d like to write
	writel 0x5000020 0x0
	writel 0x5000020 0x0 … (0x200 times) // issue 0x800 / 4 times
Second, repeat the first step (change the size of the buffer you’d like to write) and reach where you’d like to overwrite.
```
    LAN9118Packet tx_packet;     // last field: data[2048]
    int32_t tx_status_fifo_used;
    int32_t tx_status_fifo_head; // overwrite this
    uint32_t tx_status_fifo[512];
```
If I’d like to overwrite tx_status_fifo_head, then I should issue instructions in the following.
writel 0x5000020 0x8
writel 0x5000020 0x0
writel 0x5000020 0xaabbccdd // overwrite tx_status_fifo_used
writel 0x5000020 0xddccbbaa // overwrite tx_stats_fifo_head

Security Impact: Because we can repeat the first step without limit, this write primitive seems very powerful.
