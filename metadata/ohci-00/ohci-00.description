When I fuzzed ohci with dev-storage device, I found the assertion (s->mode ==
USB_MSDM_DATAOUT) == (req->cmd.mode == SCSI_XFER_TO_DEV) failed in
usb_msd_transfer_data(). As we can control both s->mode and req->cmd.mode, we
somehow trigger a logic conflict. In our case, s->mode is USB_MSDM_DATAOUT,
while req->cmd.mode is SCSI_XFER_FROM_DEV. We can trigger this new bug (AFAIK)
    via crafted OHCI ED and TD along with incompatible SCSI commands.

## crash analysis

1 First, I want to leave an impression on the related control flow and date
flow. 

1.1 key control flow

We must drive to usb_msd_transfer_data().

``` text
ohci_service_ed_list
ohci_service_td
usb_handle_packet
usb_process_one
    usb_device_handle_data
        usb_msd_handle_data
            scsi_req_enqueue
                scsi_target_send_command
            scsi_req_continue
                scsi_target_read_data
                    scsi_req_data
                        usb_msd_transfer_data // boom!
```

Note that scsi_req_enqueue() must return a non-zero value and thus
scsi_req_continue() can be invoked.


``` c
static void usb_msd_handle_data(USBDevice *dev, USBPacket *p)
{
    // ...
    switch (p->pid) {
    case USB_TOKEN_OUT:
        // ...
        switch (s->mode) {
            case USB_MSDM_CBW:
                // ...
                len = scsi_req_enqueue(s->req);
                if (len) {
                    scsi_req_continue(s->req);
                }
```
                
1.2 data flow (lines starting with >)

1.2.1 A simplified version:

``` text
In ohci_service_td,
> a) memcpy: CONTROLLED DMA => td
> b) memcpy: td->cbp => ohci->usb_buf
> c) let p=&ohci->usb_packet
> d) reference: ohci->usb_buf => p->iov
> e) memcpy: p->iov => cwb
> f) s->mode = USB_MSDM_DATAOUT
> g) scsi_req_parse_cdb(cwb.cmd) => req->cmd  <------------ [5]
> h) s->mode and req->cmd.mod are controlled due to a-e) and g)
```

This means we can control s->mode and req->cmd.mod to trigger the assertion.

``` c
void usb_msd_transfer_data(SCSIRequest *req, uint32_t len)
{
    // ...
    assert((s->mode == USB_MSDM_DATAOUT) == (req->cmd.mode == SCSI_XFER_TO_DEV));
    // ...
```

Note that req->cmd.mod is set at [5].

1.2.2 A detailed version:

``` text
|ohci_service_td
    |ohci_read_td(ohci=ohci, addr=addr, td=&td)
    > a) memcpy: CONTROLLER DMA => td
    |ohci_copy_td(ohci=ohci, td=&td, buf=ohci->usb_buf, len=pktlen, dir=DMA_DIRECTION_TO_DEVICE)
        |ptr = td->cbp
        |dma_memory_rw(ohci->as, ptr + ohci->localmem_base, buf, n, dir, MEMTXATTRS_UNSPECIFIED)
        |dma_memory_rw(ohci->as, ptr + ohci->localmem_base, buf, len - n, dir, MEMTXATTRS_UNSPECIFIED)
    > b) memcpy: td->cbp => ohci->usb_buf
    > c) let p=&ohci->usb_packet
    |usb_packet_addbuf(p=&ohci->usb_packet, ptr=ohci->usb_buf, len=pktlen);
    > d) ref: ohci->usb_buf => p->iov
    |usb_handle_packet(dev=dev, p=&ohci->usb_packet)
    |usb_process_one(p=p)
        |usb_device_handle_data(dev=dev, p=p)
            |usb_msd_handle_data(dev=p, p=p)
                |usb_packet_copy(p=p, ptr=&cbw, bytes=31);
                    |iov=p->combined ? &p->combined->iov : &p->iov;
                    |iov_to_buf(iov=iov->iov, iov_cnt=iov->niov, offset=p->actual_length, buf=ptr, bytes=bytes);
                        |iov_from_buf_full(iov=iov, iov_cnt=iov_cnt, offset=offset, buf=buf, bytes=bytes);
                            |memcpy(buf + done, iov[i].iov_base + offset, len);
                > e) memcpy: p->iov => cwb
                if (s->data_len == 0) { // important
                    s->mode = USB_MSDM_CSW;
                } else if (cbw.flags & 0x80) {
                    s->mode = USB_MSDM_DATAIN;
                } else {
                    s->mode = USB_MSDM_DATAOUT;
                }
                > f) s->mode = USB_MSDM_DATAOUT
                |s->req = scsi_req_new(d=scsi_dev, tag=tag, len=cbw.lun, buf=cbw.cmd, hba_private=NULL)
                    |ret = scsi_req_parse_cdb(dev=d, cmd=&cmd, buf=buf);
                        |cmd->len = scsi_cdb_length(buf);
                        |memcpy(cmd->buf, buf, cmd->len);
                        |scsi_cmd_xfer_mode(cmd); <------------ [5]
                        |cmd->lba = scsi_cmd_lba(cmd);
                    |req->cmd = cmd
                > g) scsi_req_parse_cdb(cwb.cmd) => req->cmd
                |scsi_req_continue(req=s->req)
                    |req->ops->read_data(req=req) // scsi_target_read_data(req)
                        |SCSITargetReq *r = DO_UPCAST(SCSITargetReq, req, req);
                        |n = r->len;
                        |scsi_req_data(req=&r->req, len=n);
                            |req->bus->info->transfer_data(req=req, len=len); //usb_msd_transfer_data(req, len)
                                | req->cmd.mod = SCSI_XFER_FROM_DEV (1) but SCSI_XFER_TO_DEV (2) is required
                > h) req->cmd.mod is controlled due to a) to f)
```

2 How can we trigger the assertion failure?

The idea to trigger this assertion failure is to craft ED and TD to invoke
usb_msd_transfer_data() and propagate controlled data to s->mode and
req->cmd.mod.

2.1 Craft ED and TD

I derive the following ed, ed, and a buffer from our fuzzer. 

```
ed.flags=0xfde70900
ed.tail=<tail td> 
ed.head=<td>
ed.next=<next ed>

td.flags=0xdedc9979
td.cbp=<buf_start>
td.next=<next_td>
td.be=<buf_end>

data between td.cbp and td.be (let's mark it cbw)
55 53 42 43 6a 92 44 08 64 00 00 00 66 ef 08 03    USBCj.D.d...f...
b9 bf 70 55 b9 bf 70 55 b9 bf 70 55 b9 bf 70       ..pU..pU..pU..p
```

We have

```
cbw = {
  sig = 0x43425355,
  tag = 0x844926a,
  data_len = 0x64,
  flags = 0x66,
  lun = 0xef,
  cmd_len = 0x8,
  cmd = "03 b9 bf 70 55 b9 bf 70 55 b9 bf 70 55 b9 bf 70"
}

req->cmd = {
  buf = "03 b9 bf 70 55 b9"
  len = 0x6, // due to buf[0] >> 5 == 0, see scsi_cdb_length
  xfer = 0x55, // due to buf[0] >> 5 == 0, see scsi_cdb_xfer
  lba = 0x19bf70, // due to buf[0] >> 5 == 0, see scsi_cmd_lba
  mode = SCSI_XFER_FROM_DEV // due to buf[0], see scsi_cmd_xfer_mode
}
```

Constructing these data needs constraints along the control flow and the data
flow. I list part of these constraints I manually collected in the following.

``` c
#define OHCI_DPTR_MASK    0xfffffff0
#define OHCI_ED_K         (1<<14)
#define OHCI_ED_F         (1<<15)
#define OHCI_ED_H         1
#define OHCI_ED_D_SHIFT   11
#define OHCI_ED_D_MASK    (3<<OHCI_ED_D_SHIFT)
#define OHCI_ED_MPS_SHIFT 16
#define OHCI_ED_MPS_MASK  (0x7ff<<OHCI_ED_MPS_SHIFT)

#define OHCI_BM(val, field) \
  (((val) & OHCI_##field##_MASK) >> OHCI_##field##_SHIFT)

assert(ed.head != 0)
assert(((ed.head & OHCI_ED_H) || (ed.flags & OHCI_ED_K)) == 0)
assert((ed.head & OHCI_DPTR_MASK) != ed.tail) // the number of tds must be larger than 1
assert((ed.flags & OHCI_ED_F) == 0)
assert((ed->head & OHCI_DPTR_MASK) != ohci->async_td)
assert(OHCI_BM(ed->flags, ED_D) == 1)
assert(tb.cbp && td.be)
if assert((td.cbp & 0xfffff000) != (td.be & 0xfffff000))
    assert(((td.be & 0xfff) + 0x1001 - (td.cbp & 0xfff)) == 0x1f)
else
    assert(td.be - td.cbp + 1 == 0x1f)
assert(((ed->flags & OHCI_ED_MPS_MASK) >> OHCI_ED_MPS_SHIFT) > 0x1f)
assert(cbw.sig == 0x43425355)
```

2.2 Make sure the control flow go to usb_msd_transfer_data()

Recalling that scsi_req_enqueue() must return non-zero, we have to carefully
choose req->ops->send_command() [1]. We don't want scsi_unit_attention() [2] as
its always return 0 and we want scsi_target_send_command() [3].

``` c
int32_t scsi_req_enqueue(SCSIRequest *req)
{
    // ...
    rc = req->ops->send_command(req, req->cmd.buf); <------------------ [1]
    // ...
    return rc;
}

SCSIRequest *scsi_req_new(SCSIDevice *d, uint32_t tag, uint32_t lun,
                          uint8_t *buf, void *hba_private)
{
    // ...
    if ((d->unit_attention.key == UNIT_ATTENTION ||
        // ...
        ops = &reqops_unit_attention; <-------------------------------- [2]
    } else if (lun != d->lun ||
               buf[0] == REPORT_LUNS || <-------------------------------[4]
               (buf[0] == REQUEST_SENSE && d->sense_len)) {
        ops = &reqops_target_command; <-------------------------------- [3]
    } else {
        ops = NULL;
    }
    // ...
}
```

The key to choose scsi_target-send_command() [3] is to update
d->unit_attention.key (not to be UNIT_ATTENTION). Interestingly,
d->unit_attention.key goes to 0 at the end of scsi_unit_attention() [2].
Therefore, we want trigger scsi_req_new() two times. In the first time, we clear
d->unit_attention.key and in the second time, we assign &reqops_target_command
to ops.

Note that I omit some details how to invoke ohci_service_td(). This is done by
setting OHCI_CTL_PLE and crafting hcca.

2.3 scsi_target_send_command()

In scsi_req_enqueue(), scsi_target_send_command() is invoked and returns 8.

``` c
req->cmd = {
  buf = "03 b9 bf 70 55 b9"
  len = 0x6, xfer = 0x55, lba = 0x19bf70,
  mode = SCSI_XFER_FROM_DEV
}
```

Specifically, scsi_target_send_commands() accepts an SCSIRequest object and the
req->cmd.buf that is "03 b9 bf 70 55 b9". In the branch REQUEST_SENSE
(buf[0]==0x3), scsi_build_sense_buf() is invoked with req->cmd.xfer (0x55),
fixed_sense (0);

``` c
static int32_t scsi_target_send_command(SCSIRequest *req, uint8_t *buf)
{
    // ...
    switch (buf[0]) {
    // ...
    case REQUEST_SENSE:
        scsi_target_alloc_buf(&r->req, scsi_sense_len(req));
        if (req->lun != 0) {
            const struct SCSISense sense = SENSE_CODE(LUN_NOT_SUPPORTED);

            r->len = scsi_build_sense_buf(r->buf, req->cmd.xfer,
                                          sense, fixed_sense);
        } else {
        // ...
```

In scsi_build_sense_buf(), we will get 8 or 18 returned.

``` c
#define SCSI_SENSE_LEN         18
int scsi_build_sense_buf(uint8_t *out_buf, size_t size, SCSISense sense,
                         bool fixed_sense)
{
    int len;
    uint8_t buf[SCSI_SENSE_LEN] = { 0 };

    if (fixed_sense) {
        buf[0] = 0x70;
        buf[2] = sense.key;
        buf[7] = 10;
        buf[12] = sense.asc;
        buf[13] = sense.ascq;
        len = 18;
    } else {
        buf[0] = 0x72;
        buf[1] = sense.key;
        buf[2] = sense.asc;
        buf[3] = sense.ascq;
        len = 8;
    }
    len = MIN(len, size); <------------ [6] always 8
    memcpy(out_buf, buf, len);
    return len;
}
```

## Some thoughts of fixes

According to scsi_cmd_xfer_mode(), REQUEST_SENSE (0x3) will enforce cmd->mode to
SCSI_XFER_FROM_DEV, while dev-storage doesn't know and doesn't think so. We
maybe check it in the dev-storage in advance to avoid the assertion. However,
I'm not sure about this fix. I'd like to discuss more.
