I found a off-by-one heap-buffer-overflow read [3] in sdhci_read_dataport() and
write [4] in sdhci_write_dataport() to s->fifo_buffer since s->data_count [2] is
possibly equal to the size of the heap buffer s->fifo_buffer [1]. As
s->data_count is immediately reset [5], we can only read and write one byte
after a beap buffer.

``` c
static uint32_t sdhci_read_dataport(SDHCIState *s, unsigned size)
{
    // ...
    for (i = 0; i < size; i++) {
        // sizeof(s->fifo_buffer) = 0x200 // <--------------------------- [1]
        // s->data_count = 0x200 // <------------------------------------ [2]
        value |= s->fifo_buffer[s->data_count] << i * 8; // <------------ [3]
        // ...
        if (s->data_count >= (s->blksize & BLOCK_SIZE_MASK)) {
            s->data_count = 0; // <-------------------------------------- [5]

static void sdhci_write_dataport(SDHCIState *s, uint32_t value, unsigned size)
{
    // ...
    for (i = 0; i < size; i++) {
        // sizeof(s->fifo_buffer) = 0x200 // <--------------------------- [1]
        // s->data_count = 0x200 // <------------------------------------ [2]
        s->fifo_buffer[s->data_count] = value & 0xFF; // <--------------- [4]
        // ...
        if (s->data_count >= (s->blksize & BLOCK_SIZE_MASK)) {
            s->data_count = 0; // <-------------------------------------- [5]
```

The key to trigger this off-by-one read/write is producing a dma access error.

Here is how the off-by-one read works. The write works similarly.

sdhci_do_adma() will load a DMA descriptor [6] and set s->data_count to
s->blksize (0x200) [7]. Usually, s->data_count will be clear at [10]. However,
if dma_memory_write() at [8] returns an error, the value of s->data_count will
be kept since nothing has been done at [9]. One possible way to let
dma_memory_write() returns error is to set dscr.addr to an invalid address.
For example, a guest requires 2G physical memory, but dscr.addr is set to 3G.

 
``` c
static void sdhci_do_adma(SDHCIState *s)
{
        // ...
        get_adma_description(s, &dscr); // <---------------------------- [6]

        // ...
        length = dscr.length ? dscr.length : 64 * KiB;

        switch (dscr.attr & SDHC_ADMA_ATTR_ACT_MASK) {
        case SDHC_ADMA_ATTR_ACT_TRAN:  /* data transfer */
                    // ...
                    begin = s->data_count;
                    if ((length + begin) < block_size) {
                        // ...
                     } else {
                        s->data_count = block_size; // <---------------- [7]
                        length -= block_size - begin;
                    }
                    res = dma_memory_write(s->dma_as, dscr.addr, // <--- [8]
                    // ...
                    if (res != MEMTX_OK) {
                        break; // <------------------------------------- [9]
                    }
                    dscr.addr += s->data_count - begin;
                    if (s->data_count == block_size) {
                        s->data_count = 0; // <------------------------ [10]
                        // ...
```
